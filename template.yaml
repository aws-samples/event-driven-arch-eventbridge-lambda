AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  bp-event-driven-architecture-using-event-bridge

  Sample SAM Template for bp-event-driven-architecture-using-event-bridge

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: python3.9
    Handler: app.handler
    Architectures:
      - arm64
    Timeout: 3
    Tracing: Active
    Layers:
      - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension-Arm64:1"
    Environment:
      Variables:
        LOG_LEVEL: DEBUG

Resources:
  #cloudtrail bucket and policy for eventbridge
  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true

  CloudTrailBucketPolicy:
    DependsOn:
        - CloudTrailBucket
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AWSCloudTrailAclCheck"
            Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: "s3:GetBucketAcl"
            Resource: !Sub arn:aws:s3:::${CloudTrailBucket}
          - Sid: "AWSCloudTrailWrite"
            Effect: Allow
            Principal:
              Service: 'cloudtrail.amazonaws.com'
            Action: "s3:PutObject"
            Resource: !Sub arn:aws:s3:::${CloudTrailBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'
  #receive file resources
  FileReceiverBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        EventBridgeConfiguration: {}

  OnFileReceiveFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/on_file_receive/
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern: !Sub |
              {
                "source": ["aws.s3"],
                "detail-type": ["Object Created"],
                "detail": {
                  "bucket": {
                  "name": ["${FileReceiverBucket}"]
                  }
                }
              }
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref FileReceiverBucket
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
  #file validation resources
  OnFileConvertedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/on_file_converted/
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern: !Sub |
              {
                "source": ["NFProcessor.file_receiver"],
                "detail-type": ["file-converted"]
              }
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default

  OnFileconvertedErrorQueue:
    Type: AWS::SQS::Queue

  OnFileConvertedErrorEBRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern: !Sub |
        {
          "source": ["NFProcessor.file_receiver"],
          "detail-type": ["file-converted-error"]
        }
      Targets:
        - Arn: !GetAtt OnFileconvertedErrorQueue.Arn
          Id: "FileConvertedErrorQueue"
  
  # Allow EventBridge to invoke SQS
  EventBridgeToToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: SQS:SendMessage
          Resource:  !GetAtt OnFileconvertedErrorQueue.Arn
      Queues:
        - Ref: OnFileconvertedErrorQueue

  #database persistence(final) step resources
  FileStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: filename
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: filename
          KeyType: HASH

  OnFileValidatedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/on_file_validated/
      Events:
        Trigger:
          Type: EventBridgeRule
          Properties:
            Pattern: !Sub |
              {
                "source": ["NFProcessor.file_validator"],
                "detail-type": ["file-validated"]
              }
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FileStatusTable
      Environment:
        Variables:
          DDB_TABLE_NAME: !Ref FileStatusTable  
  
  #Custom resource
  #bucket cleaner(empties the buckets prior to deletion)
  S3CleanerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/custom_resource_s3cleaner/
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref FileReceiverBucket
        - S3FullAccessPolicy:
            BucketName: !Ref CloudTrailBucket
  
  S3CleanerCustomResource:
    Type: Custom::S3Cleaner
    Properties:
      ServiceToken: !GetAtt S3CleanerFunction.Arn
      FileReceiverBucketName: !Ref FileReceiverBucket
      EBTrailBucketName: !Ref CloudTrailBucket
    DependsOn:
      - FileReceiverBucket
      - CloudTrailBucket

  #resources that cannot be created by sam will be handled by bellow stack
  NonSamResources:
    Type: AWS::CloudFormation::Stack
    Properties:
      # The path starts with '../..' as this will be evaluated from the
      # warehouse/build folder, not the warehouse folder.
      TemplateURL: templates/non-sam-resources.yaml
      Parameters:
        CloudTrailBucketName: !Ref CloudTrailBucket

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # HelloWorldFunction:
  #   Description: "Hello World Lambda Function ARN"
  #   Value: !GetAtt HelloWorldFunction.Arn
  # HelloWorldFunctionIamRole:
  #   Description: "Implicit IAM Role created for Hello World function"
  #   Value: !GetAtt HelloWorldFunctionRole.Arn
  CloudTrailBucketName:
    Description: "Bucket name for CloudTrail stack"
    Value: !Ref CloudTrailBucket
